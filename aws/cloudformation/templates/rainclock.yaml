AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Rain Clock
Parameters:
  DarkSkyApiKey:
    Type: String
Resources:
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RainClock
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
    DependsOn:
      - RainClocksGet
  Prod:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref ApiDeployment
      MethodSettings:
        - ResourcePath: '/forecast'
          HttpMethod: POST
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: ERROR
  ForecastModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: Forecast
      ContentType: application/json
      RestApiId: !Ref ApiGateway
      Schema:
        $schema: 'http://json-schema.org/draft-04/schema#'
        title: Forecast
        type: object
        properties:
          summary:
            type: string
          data:
            type: array
            items:
              type: object
              properties:
                time:
                  type: number
                precipIntensity:
                  type: number
                precipProbability:
                  type: number
  RainClockResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: forecast
  RainClocksGet:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref RainClockResource
      HttpMethod: GET
      RequestParameters:
        method.request.querystring.latitude: true
        method.request.querystring.longitude: true
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: !Ref ForecastModel
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: ApiGateway
      ResourceId:
        Ref: RainClockResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'*'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
  CloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
         - Effect: Allow
           Principal:
             Service:
              - apigateway.amazonaws.com
           Action: sts:AssumeRole
      ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  Account:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          DARK_SKY: !Ref DarkSkyApiKey
      CodeUri: ../../lambda/forecast/.build/forecast.zip
      Runtime: nodejs6.10
      Timeout: 24
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: logs
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - 'logs:*'
            Resource: arn:aws:logs:*:*:*
      - PolicyName: xray
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          -
            Effect: Allow
            Action:
            - 'xray:PutTraceSegments'
            Resource: '*'
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Lambda}
      Principal: apigateway.amazonaws.com
  SampleBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RainClockPublicBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${RainClockPublicBucket}/*
            Principal: "*"
  RainClockPublicBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
    DeletionPolicy: Retain
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt RainClockPublicBucket.DomainName
          Id: !Ref RainClockPublicBucket
          S3OriginConfig:
            OriginAccessIdentity: ''
        Enabled: true
        DefaultRootObject: index.html
        Aliases:
        - rainclock.mattcanty.com
        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          TargetOriginId: !Ref RainClockPublicBucket
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: allow-all
        PriceClass: PriceClass_200
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: Z17KNIJCMR0M8T
      RecordSets:
      - Name: rainclock-aws
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # = CloudFront
          DNSName: !GetAtt CloudFront.DomainName